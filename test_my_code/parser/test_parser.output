Nonterminals useless in grammar

    declaration
    declaration_specifiers
    type_specifier
    jump_statement
    statement
    compound_statement
    statement_list
    expression
    expression_statement
    function_definition
    direct_declarator


Terminals unused in grammar

    CONSTANT
    STRING_LITERAL
    SIZEOF
    PTR_OP
    INC_OP
    DEC_OP
    LEFT_OP
    RIGHT_OP
    LE_OP
    GE_OP
    EQ_OP
    NE_OP
    AND_OP
    OR_OP
    MUL_ASSIGN
    DIV_ASSIGN
    MOD_ASSIGN
    ADD_ASSIGN
    SUB_ASSIGN
    LEFT_ASSIGN
    RIGHT_ASSIGN
    AND_ASSIGN
    XOR_ASSIGN
    OR_ASSIGN
    TYPE_NAME
    TYPEDEF
    EXTERN
    STATIC
    AUTO
    REGISTER
    CHAR
    SHORT
    INT
    LONG
    SIGNED
    UNSIGNED
    FLOAT
    DOUBLE
    CONST
    VOLATILE
    VOID
    STRUCT
    UNION
    ENUM
    ELLIPSIS
    CASE
    DEFAULT
    IF
    ELSE
    SWITCH
    WHILE
    DO
    FOR
    GOTO
    CONTINUE
    BREAK
    RETURN
    ';'
    '{'
    '}'
    '['
    ']'
    '('
    ')'


Rules useless in grammar

    3 declaration: declaration_specifiers EXPR ';'

    4 declaration_specifiers: type_specifier
    5                       | type_specifier declaration_specifiers

    6 type_specifier: VOID
    7               | CHAR
    8               | SHORT
    9               | INT
   10               | LONG
   11               | FLOAT
   12               | DOUBLE
   13               | SIGNED
   14               | UNSIGNED
   15               | TYPE_NAME

   16 jump_statement: GOTO IDENTIFIER ';'
   17               | CONTINUE ';'
   18               | BREAK ';'
   19               | RETURN ';'
   20               | RETURN expression ';'

   21 statement: compound_statement
   22          | expression_statement
   23          | jump_statement

   24 compound_statement: '{' '}'
   25                   | '{' statement_list '}'

   26 statement_list: statement
   27               | statement_list statement

   28 expression: CONSTANT

   29 expression_statement: ';'
   30                     | expression ';'

   31 function_definition: direct_declarator compound_statement

   32 direct_declarator: IDENTIFIER
   33                  | direct_declarator '[' jump_statement ']'
   34                  | direct_declarator '[' ']'
   35                  | declaration_specifiers direct_declarator
   36                  | direct_declarator '(' ')'


Grammar

    0 $accept: ROOT $end

    1 ROOT: EXPR

    2 EXPR: IDENTIFIER


Terminals, with rules where they appear

    $end (0) 0
    '(' (40)
    ')' (41)
    ';' (59)
    '[' (91)
    ']' (93)
    '{' (123)
    '}' (125)
    error (256)
    IDENTIFIER <string> (258) 2
    CONSTANT (259)
    STRING_LITERAL (260)
    SIZEOF (261)
    PTR_OP (262)
    INC_OP (263)
    DEC_OP (264)
    LEFT_OP (265)
    RIGHT_OP (266)
    LE_OP (267)
    GE_OP (268)
    EQ_OP (269)
    NE_OP (270)
    AND_OP (271)
    OR_OP (272)
    MUL_ASSIGN (273)
    DIV_ASSIGN (274)
    MOD_ASSIGN (275)
    ADD_ASSIGN (276)
    SUB_ASSIGN (277)
    LEFT_ASSIGN (278)
    RIGHT_ASSIGN (279)
    AND_ASSIGN (280)
    XOR_ASSIGN (281)
    OR_ASSIGN (282)
    TYPE_NAME (283)
    TYPEDEF (284)
    EXTERN (285)
    STATIC (286)
    AUTO (287)
    REGISTER (288)
    CHAR (289)
    SHORT (290)
    INT (291)
    LONG (292)
    SIGNED (293)
    UNSIGNED (294)
    FLOAT (295)
    DOUBLE (296)
    CONST (297)
    VOLATILE (298)
    VOID (299)
    STRUCT (300)
    UNION (301)
    ENUM (302)
    ELLIPSIS (303)
    CASE (304)
    DEFAULT (305)
    IF (306)
    ELSE (307)
    SWITCH (308)
    WHILE (309)
    DO (310)
    FOR (311)
    GOTO (312)
    CONTINUE (313)
    BREAK (314)
    RETURN (315)


Nonterminals, with rules where they appear

    $accept (68)
        on left: 0
    ROOT (69)
        on left: 1
        on right: 0
    EXPR <expr> (70)
        on left: 2
        on right: 1


State 0

    0 $accept: . ROOT $end

    IDENTIFIER  shift, and go to state 1

    ROOT  go to state 2
    EXPR  go to state 3


State 1

    2 EXPR: IDENTIFIER .

    $default  reduce using rule 2 (EXPR)


State 2

    0 $accept: ROOT . $end

    $end  shift, and go to state 4


State 3

    1 ROOT: EXPR .

    $default  reduce using rule 1 (ROOT)


State 4

    0 $accept: ROOT $end .

    $default  accept
